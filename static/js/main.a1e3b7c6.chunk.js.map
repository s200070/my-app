{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","url","state","data","image","this","getData","a","JsonP","then","res","json","item","console","log","setState","alert","onChange","handleText","bind","onClick","handleSubmit","event","key","target","value","keyword","componentDidMount","React","Component","SearchTextInput","type","SearchSubmit","Button","variant","href","color","ViewImages","map","v","i","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAIMA,E,kDACJ,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,IAAM,kEACX,EAAKC,MAAQ,CACXD,IACE,6FACFE,KAAM,CAAC,CAAEC,MAAO,QANA,E,qDAUpB,WACEC,KAAKC,Y,4DAGP,4BAAAC,EAAA,sEACqBC,IAAMH,KAAKH,MAAMD,KACjCQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,QAHrB,OACQT,EADR,OAIE,IAEEU,QAAQC,IAAIX,EAAKS,MACjBP,KAAKU,SAAS,CAAEZ,KAAMA,IACtB,SACAa,MAAM,oGATV,gD,0EAcA,WAEE,OADAH,QAAQC,IAAIT,KAAKH,MAAMD,KAErB,qCACE,gCACE,wIACA,cAAC,EAAD,CAAiBgB,SAAUZ,KAAKa,WAAWC,KAAKd,QAChD,cAAC,EAAD,CAAce,QAASf,KAAKgB,aAAaF,KAAKd,WAEhD,cAAC,EAAD,CAAYF,KAAME,KAAKH,MAAMC,Y,wBAMnC,SAAYmB,GACV,IAAMC,EAAM,YAAcD,EAAME,OAAOC,MACvCpB,KAAKU,SAAS,CAAEd,IAAKI,KAAKJ,IAAMsB,EAAKG,QAASJ,EAAME,OAAOC,U,0BAI7D,WACEpB,KAAKsB,wB,GAnDSC,IAAMC,WAwDlBC,EAAkB,SAAA9B,GACtB,OAAO,uBAAO+B,KAAK,OAAOd,SAAUjB,EAAMiB,YAItCe,EAAe,SAAAhC,GACnB,OACE,cAACiC,EAAA,EAAD,CACEb,QAASpB,EAAMoB,QACfc,QAAQ,WACRC,KAAK,gBACLC,MAAM,UAJR,2BAYEC,EAAa,SAAArC,GACjB,OACE,mCACGA,EAAMG,KAAKmC,KAAI,SAACC,EAAGC,GAAJ,OACd,mBAAGL,KAAMI,EAAEtC,IAAX,SACE,qBAAKwC,IAAKF,EAAEnC,SADOoC,SAQdzC,IC/EA2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a1e3b7c6.chunk.js","sourcesContent":["import React from 'react'\nimport JsonP from 'fetch-jsonp'\nimport { Button } from '@material-ui/core'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.url = 'https://www.sysbird.jp/webapi/?format=jsonp&apikey=guest&max=30'\n    this.state = {\n      url:\n        'https://www.sysbird.jp/webapi/?format=jsonp&apikey=guest&max=30&keyword=お菓子',\n      data: [{ image: null }]\n    }\n  }\n\n  componentDidMount () {\n    this.getData()\n  }\n\n  async getData () {\n    const data = await JsonP(this.state.url)\n      .then(res => res.json())\n      .then(res => res.item)\n    try {\n      // エラー処理（検索結果がない場合）\n      console.log(data.item)\n      this.setState({ data: data })\n    } catch {\n      alert('検索結果が見つかりませんでした。')\n    }\n  }\n\n  // 表示\n  render () {\n    console.log(this.state.url)\n    return (\n      <>\n        <div>\n          <h1>検索したいお菓子を入力してください</h1>\n          <SearchTextInput onChange={this.handleText.bind(this)} />\n          <SearchSubmit onClick={this.handleSubmit.bind(this)} />\n        </div>\n        <ViewImages data={this.state.data} />\n      </>\n    )\n  }\n\n  // 検索ボタンをクリックしたときの処理\n  handleText (event) {\n    const key = '&keyword=' + event.target.value\n    this.setState({ url: this.url + key, keyword: event.target.value })\n  }\n\n  // 検索ボタンの処理\n  handleSubmit () {\n    this.componentDidMount()\n  }\n}\n\n// 入力するフォームの処理\nconst SearchTextInput = props => {\n  return <input type='text' onChange={props.onChange} />\n}\n\n// 検索ボタン表示の処理\nconst SearchSubmit = props => {\n  return (\n    <Button\n      onClick={props.onClick}\n      variant='outlined'\n      href='#text-buttons'\n      color='primary'\n    >\n      検索\n    </Button>\n  )\n}\n\n// 画像と画像クリックでリンクに飛ぶ処理\nconst ViewImages = props => {\n  return (\n    <>\n      {props.data.map((v, i) => (\n        <a href={v.url} key={i}>\n          <img src={v.image} />\n        </a>\n      ))}\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}